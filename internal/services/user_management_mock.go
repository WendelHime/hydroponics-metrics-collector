// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/WendelHime/hydroponics-metrics-collector/internal/services (interfaces: UserService,UserManager,RoleManager)

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/WendelHime/hydroponics-metrics-collector/internal/shared/models"
	management "github.com/auth0/go-auth0/management"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AssignRoleToUser mocks base method.
func (m *MockUserService) AssignRoleToUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUser indicates an expected call of AssignRoleToUser.
func (mr *MockUserServiceMockRecorder) AssignRoleToUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUser", reflect.TypeOf((*MockUserService)(nil).AssignRoleToUser), arg0, arg1, arg2)
}

// CreateAccount mocks base method.
func (m *MockUserService) CreateAccount(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockUserServiceMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockUserService)(nil).CreateAccount), arg0, arg1)
}

// GetRolePermissions mocks base method.
func (m *MockUserService) GetRolePermissions(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermissions", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolePermissions indicates an expected call of GetRolePermissions.
func (mr *MockUserServiceMockRecorder) GetRolePermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermissions", reflect.TypeOf((*MockUserService)(nil).GetRolePermissions), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), arg0, arg1)
}

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserManager) Create(arg0 context.Context, arg1 *management.User, arg2 ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserManagerMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManager)(nil).Create), varargs...)
}

// ListByEmail mocks base method.
func (m *MockUserManager) ListByEmail(arg0 context.Context, arg1 string, arg2 ...management.RequestOption) ([]*management.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByEmail", varargs...)
	ret0, _ := ret[0].([]*management.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByEmail indicates an expected call of ListByEmail.
func (mr *MockUserManagerMockRecorder) ListByEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEmail", reflect.TypeOf((*MockUserManager)(nil).ListByEmail), varargs...)
}

// MockRoleManager is a mock of RoleManager interface.
type MockRoleManager struct {
	ctrl     *gomock.Controller
	recorder *MockRoleManagerMockRecorder
}

// MockRoleManagerMockRecorder is the mock recorder for MockRoleManager.
type MockRoleManagerMockRecorder struct {
	mock *MockRoleManager
}

// NewMockRoleManager creates a new mock instance.
func NewMockRoleManager(ctrl *gomock.Controller) *MockRoleManager {
	mock := &MockRoleManager{ctrl: ctrl}
	mock.recorder = &MockRoleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleManager) EXPECT() *MockRoleManagerMockRecorder {
	return m.recorder
}

// AssignUsers mocks base method.
func (m *MockRoleManager) AssignUsers(arg0 context.Context, arg1 string, arg2 []*management.User, arg3 ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignUsers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignUsers indicates an expected call of AssignUsers.
func (mr *MockRoleManagerMockRecorder) AssignUsers(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUsers", reflect.TypeOf((*MockRoleManager)(nil).AssignUsers), varargs...)
}

// Permissions mocks base method.
func (m *MockRoleManager) Permissions(arg0 context.Context, arg1 string, arg2 ...management.RequestOption) (*management.PermissionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Permissions", varargs...)
	ret0, _ := ret[0].(*management.PermissionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Permissions indicates an expected call of Permissions.
func (mr *MockRoleManagerMockRecorder) Permissions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockRoleManager)(nil).Permissions), varargs...)
}
