// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/WendelHime/hydroponics-metrics-collector/internal/services (interfaces: Authenticator,OAuth)

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/WendelHime/hydroponics-metrics-collector/internal/shared/models"
	authentication "github.com/auth0/go-auth0/authentication"
	oauth "github.com/auth0/go-auth0/authentication/oauth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockAuthenticator) SignIn(arg0 context.Context, arg1 models.Credentials) (models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthenticatorMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthenticator)(nil).SignIn), arg0, arg1)
}

// MockOAuth is a mock of OAuth interface.
type MockOAuth struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthMockRecorder
}

// MockOAuthMockRecorder is the mock recorder for MockOAuth.
type MockOAuthMockRecorder struct {
	mock *MockOAuth
}

// NewMockOAuth creates a new mock instance.
func NewMockOAuth(ctrl *gomock.Controller) *MockOAuth {
	mock := &MockOAuth{ctrl: ctrl}
	mock.recorder = &MockOAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth) EXPECT() *MockOAuthMockRecorder {
	return m.recorder
}

// LoginWithAuthCodeWithPKCE mocks base method.
func (m *MockOAuth) LoginWithAuthCodeWithPKCE(arg0 context.Context, arg1 oauth.LoginWithAuthCodeWithPKCERequest, arg2 oauth.IDTokenValidationOptions, arg3 ...authentication.RequestOption) (*oauth.TokenSet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginWithAuthCodeWithPKCE", varargs...)
	ret0, _ := ret[0].(*oauth.TokenSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithAuthCodeWithPKCE indicates an expected call of LoginWithAuthCodeWithPKCE.
func (mr *MockOAuthMockRecorder) LoginWithAuthCodeWithPKCE(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithAuthCodeWithPKCE", reflect.TypeOf((*MockOAuth)(nil).LoginWithAuthCodeWithPKCE), varargs...)
}

// LoginWithPassword mocks base method.
func (m *MockOAuth) LoginWithPassword(arg0 context.Context, arg1 oauth.LoginWithPasswordRequest, arg2 oauth.IDTokenValidationOptions, arg3 ...authentication.RequestOption) (*oauth.TokenSet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginWithPassword", varargs...)
	ret0, _ := ret[0].(*oauth.TokenSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithPassword indicates an expected call of LoginWithPassword.
func (mr *MockOAuthMockRecorder) LoginWithPassword(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithPassword", reflect.TypeOf((*MockOAuth)(nil).LoginWithPassword), varargs...)
}
